class Data {

    public int data;

    public Data(int data) {
        this.data = data;
    }
    public int getKey(){
        return data;
    }
}
class HashTable {
    private Data[]hashArray;
    private int arraysize;
    
    
    public HashTable(int size){
        this.arraysize=size;
        hashArray= new Data[arraysize];
       
    }
    public void displayTable(){
        System.out.print("Table : ");
        for ( int i=0; i< arraysize; i++){
            if (hashArray[i] !=null){
                System.out.println("|"+"\t"+hashArray[i].getKey()+"|");
            }else{
                System.out.println("|"+i+"\t | -- |");
            }
        }
        System.out.println("");
                
    }
    public int hashFunc  (int key){
        return key % arraysize;
    }
    public int hashFunc2 (int key){
        return 5 - key % 5;
    }
    public int QuadraticProbing (int data, int position){
        int limit = 50, i= 1;
        int hashVal = -1;
        while (i<limit){
            hashVal = hashFunc (position + (int)Math.pow(i, 2));
            if (hashArray[hashVal] ==null){
                break;
                
            }else{ 
                i++;
            }
        }
        return hashVal;
    }
    
    public void insert (int data){
        Data item = new Data (data);
        int key = item.getKey();
        int hashVal = hashFunc(key);
        int stepSize = hashFunc2(key);
        while(hashArray[hashVal] != null){
            hashVal += stepSize;
            hashVal %= arraysize;	       
        }
        hashArray[hashVal] =item;
    }
    public Data delete (int key){
        int hashVal = hashFunc(key);
        int stepSize = hashFunc2(key);
        while (hashArray[hashVal] != null){
            if (hashArray [hashVal].getKey() == key){
                Data temp = hashArray[hashVal];
                hashArray[hashVal]= null;
                return temp;
            }
            hashVal +=stepSize;
            hashVal %= arraysize;
        }
        return null;
    }
    public Data find (int key){
        int hashVal = hashFunc(key);
        int stepSize = hashFunc2 (key);
        while(hashArray[hashVal] != null) {
            if(hashArray[hashVal].getKey() == key){
                return hashArray[hashVal];
             }
            hashVal += stepSize;
            hashVal %= arraysize;	
    }
        return null;
    }
}
public class HashedApp {

    
    
    public static void main(String[] args) {
       
        HashTable ambilkan = new HashTable(19);
        ambilkan.QuadraticProbing(2, 3);
        ambilkan.displayTable();
        ambilkan.insert(11);
        ambilkan.displayTable();
        ambilkan.insert(10);
        ambilkan.insert(45);
        ambilkan.QuadraticProbing(12, 10);
        ambilkan.displayTable();
        ambilkan.find(11);
        ambilkan.displayTable();
    }
    
}
