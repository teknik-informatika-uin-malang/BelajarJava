public class Graph {
    private final int MAX_VERTS =20;
    private Vertex vertexList [];
    private int adjMat[][];
    private int nVerts;
    
    public Graph (){
        vertexList = new Vertex[MAX_VERTS];
        adjMat = new int [MAX_VERTS][MAX_VERTS];
        nVerts =0;
        for (int i=0; i<MAX_VERTS; i++){
            for (int j = 0 ; j < MAX_VERTS; j++){
                adjMat [i][j]=0;
            }
        }
    }
    public void addVertex (char label){
        vertexList[nVerts++]=new Vertex(label);
    }
    public void addEdge (int start, int end){
        adjMat[start][end]=1;
    }
    
    public void connectTable (){
        System.out.println("Connectivity Table : ");
        for (int row =0; row < nVerts; row++){
            System.out.print(vertexList[row].label+" ");
            for (int col =0; col <nVerts; col++){
                if (adjMat[row][col]== 1){
                    System.out.print(vertexList[col].label+" ");
                    
                    for (int i =0; i<nVerts; i++){
                        if(adjMat[col][i] == 1 && vertexList[i].wasVisited == false) {
                            System.out.print(vertexList[i].label+" ");
                            vertexList[i].wasVisited = true;
                        }
                            
                        }
                    getAdjUnvisitedVertex(col);
                    
                    }
                }
            resetFlag();
            System.out.println("");
            }
        }
    public void getAdjUnvisitedVertex(int v){
        for (int i=0; i<nVerts; i++){
            if(adjMat[v][i]==1&&vertexList[i].wasVisited==false){
                System.out.print(vertexList[i].label+" ");
                vertexList[i].wasVisited =false;
                
            }
    }
    }
    public void resetFlag (){
        for (int i=0; i<nVerts; i++){
            vertexList[i].wasVisited = false;
    }
    }
    public void display (){
        System.out.println("Adjacency: ");
        for (int row =0; row <nVerts; row ++){
            for (int col =0; col<nVerts; col++){
                if (adjMat[row][col]==1){
                    System.out.println(vertexList[row].label+"-->"+vertexList[col].label);
                }
            }
        }
        System.out.println(" ");
    }
public void topo(){
        int orig_nVerts =0;
        while (nVerts>0){
            int currentVertex = noSuccessor ();
            if (currentVertex == -1){
                System.out.println("ERROR : Graph has cycles");
                return;
            }
            sortedArray[nVerts - 1] = vertexList[currentVertex].label;
            deleteVertex[currentVertex];
        }
        System.out.println("Topologically sorted order : ");
        for (int i=0; i<orig_nVerts; i++){
            System.out.print(sortedArray[i]+" ");
        }
        System.out.println("");
    }
    private int noSuccessor (){
        boolean isEdge;
        for (int row =0; row <nVerts; row ++){
            isEdge = false;
            for (int col = 0 ; col<nVerts; col ++){
                if (adjMat[row][col] > 0){
                    isEdge = true;
                    break;
                    
                }
            }
            if (!isEdge){
                return row;
            }
        }
        return -1;
    }
    private void deleteVertex(int delVert){
        if (delVert != nVerts -1){
            for (int j =delVert; j<nVerts -1; j++){
                vertexList[j]=vertexList[j+1];
            }
            for (int row = delVert; row <nVerts -1; row ++){
                moveRowUp (row, nVerts);
            }
            for (int col =0; col <nVerts -1 ; col++){
                moveColLeft(col, nVerts -1);
            }
        }
        nVerts--;
    }
    private void moveRowUp (int row, int length){
        for (int col = 0; col <length; col++){
            adjMat[row][col] = adjMat[row+1][col];
        }
        
    }
    private void moveColLeft (int col, int length){
        for (int row =0; row <length; row++){
            adjMat[row][col]=adjMat[row][col+1];
    }
    }
}
//masih error pada deleteVertex dan sortedArray
//warning error in deleteVertex and SortedArray
